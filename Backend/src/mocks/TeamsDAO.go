// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import databaseAccess "Server/databaseAccess"
import mock "github.com/stretchr/testify/mock"

// TeamsDAO is an autogenerated mock type for the TeamsDAO type
type TeamsDAO struct {
	mock.Mock
}

// CreatePlayer provides a mock function with given fields: leagueId, playerInfo
func (_m *TeamsDAO) AddNewPlayer(leagueId int, playerInfo databaseAccess.PlayerCore) (int, error) {
	ret := _m.Called(leagueId, playerInfo)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, databaseAccess.PlayerCore) int); ok {
		r0 = rf(leagueId, playerInfo)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, databaseAccess.PlayerCore) error); ok {
		r1 = rf(leagueId, playerInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeManagerPermissions provides a mock function with given fields: teamId, userId, teamPermissionInformation
func (_m *TeamsDAO) ChangeManagerPermissions(teamId int, userId int, teamPermissionInformation databaseAccess.TeamPermissionsCore) error {
	ret := _m.Called(teamId, userId, teamPermissionInformation)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, databaseAccess.TeamPermissionsCore) error); ok {
		r0 = rf(teamId, userId, teamPermissionInformation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTeam provides a mock function with given fields: leagueId, userId, teamInfo
func (_m *TeamsDAO) CreateTeam(leagueId int, userId int, teamInfo databaseAccess.TeamCore) (int, error) {
	ret := _m.Called(leagueId, userId, teamInfo)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int, databaseAccess.TeamCore) int); ok {
		r0 = rf(leagueId, userId, teamInfo)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, databaseAccess.TeamCore) error); ok {
		r1 = rf(leagueId, userId, teamInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTeamWithIcon provides a mock function with given fields: leagueId, userId, teamInfo, iconSmall, iconLarge
func (_m *TeamsDAO) CreateTeamWithIcon(leagueId int, userId int, teamInfo databaseAccess.TeamCore, iconSmall string, iconLarge string) (int, error) {
	ret := _m.Called(leagueId, userId, teamInfo, iconSmall, iconLarge)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int, databaseAccess.TeamCore, string, string) int); ok {
		r0 = rf(leagueId, userId, teamInfo, iconSmall, iconLarge)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, databaseAccess.TeamCore, string, string) error); ok {
		r1 = rf(leagueId, userId, teamInfo, iconSmall, iconLarge)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTeam provides a mock function with given fields: teamId
func (_m *TeamsDAO) DeleteTeam(teamId int) error {
	ret := _m.Called(teamId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(teamId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DoesPlayerExistInTeam provides a mock function with given fields: teamId, playerId
func (_m *TeamsDAO) DoesPlayerExistInTeam(teamId int, playerId int) (bool, error) {
	ret := _m.Called(teamId, playerId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(teamId, playerId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(teamId, playerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DoesTeamExistInLeague provides a mock function with given fields: leagueId, teamId
func (_m *TeamsDAO) DoesTeamExistInLeague(leagueId int, teamId int) (bool, error) {
	ret := _m.Called(leagueId, teamId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(leagueId, teamId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(leagueId, teamId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamInformation provides a mock function with given fields: teamId
func (_m *TeamsDAO) GetTeamInformation(teamId int) (*databaseAccess.TeamWithPlayers, error) {
	ret := _m.Called(teamId)

	var r0 *databaseAccess.TeamWithPlayers
	if rf, ok := ret.Get(0).(func(int) *databaseAccess.TeamWithPlayers); ok {
		r0 = rf(teamId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databaseAccess.TeamWithPlayers)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(teamId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamPermissions provides a mock function with given fields: teamId, userId
func (_m *TeamsDAO) GetTeamPermissions(teamId int, userId int) (*databaseAccess.TeamPermissionsCore, error) {
	ret := _m.Called(teamId, userId)

	var r0 *databaseAccess.TeamPermissionsCore
	if rf, ok := ret.Get(0).(func(int, int) *databaseAccess.TeamPermissionsCore); ok {
		r0 = rf(teamId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databaseAccess.TeamPermissionsCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(teamId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsInfoInUse provides a mock function with given fields: leagueId, teamId, name, tag
func (_m *TeamsDAO) IsInfoInUse(leagueId int, teamId int, name string, tag string) (bool, string, error) {
	ret := _m.Called(leagueId, teamId, name, tag)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int, string, string) bool); ok {
		r0 = rf(leagueId, teamId, name, tag)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(int, int, string, string) string); ok {
		r1 = rf(leagueId, teamId, name, tag)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int, string, string) error); ok {
		r2 = rf(leagueId, teamId, name, tag)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IsTeamActive provides a mock function with given fields: leagueId, teamId
func (_m *TeamsDAO) IsTeamActive(leagueId int, teamId int) (bool, error) {
	ret := _m.Called(leagueId, teamId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(leagueId, teamId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(leagueId, teamId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePlayer provides a mock function with given fields: playerId
func (_m *TeamsDAO) RemovePlayer(playerId int) error {
	ret := _m.Called(playerId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(playerId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePlayer provides a mock function with given fields: playerId, playerInfo
func (_m *TeamsDAO) UpdatePlayer(playerId int, playerInfo databaseAccess.PlayerCore) error {
	ret := _m.Called(playerId, playerInfo)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, databaseAccess.PlayerCore) error); ok {
		r0 = rf(playerId, playerInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTeam provides a mock function with given fields: teamId, teamInformation
func (_m *TeamsDAO) UpdateTeam(teamId int, teamInformation databaseAccess.TeamCore) error {
	ret := _m.Called(teamId, teamInformation)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, databaseAccess.TeamCore) error); ok {
		r0 = rf(teamId, teamInformation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTeamIcon provides a mock function with given fields: teamId, small, large
func (_m *TeamsDAO) UpdateTeamIcon(teamId int, small string, large string) error {
	ret := _m.Called(teamId, small, large)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, string) error); ok {
		r0 = rf(teamId, small, large)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
