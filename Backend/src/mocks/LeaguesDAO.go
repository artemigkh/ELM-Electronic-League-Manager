// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import databaseAccess "Server/databaseAccess"
import mock "github.com/stretchr/testify/mock"

// LeaguesDAO is an autogenerated mock type for the LeaguesDAO type
type LeaguesDAO struct {
	mock.Mock
}

// AddRecurringAvailability provides a mock function with given fields: leagueId, availability
func (_m *LeaguesDAO) AddRecurringAvailability(leagueId int, availability databaseAccess.SchedulingAvailabilityDTO) (int, error) {
	ret := _m.Called(leagueId, availability)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, databaseAccess.SchedulingAvailabilityDTO) int); ok {
		r0 = rf(leagueId, availability)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, databaseAccess.SchedulingAvailabilityDTO) error); ok {
		r1 = rf(leagueId, availability)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CanJoinLeague provides a mock function with given fields: leagueId, userId
func (_m *LeaguesDAO) CanJoinLeague(leagueId int, userId int) (bool, error) {
	ret := _m.Called(leagueId, userId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(leagueId, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(leagueId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLeague provides a mock function with given fields: userId, leagueInfo
func (_m *LeaguesDAO) CreateLeague(userId int, leagueInfo databaseAccess.LeagueDTO) (int, error) {
	ret := _m.Called(userId, leagueInfo)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, databaseAccess.LeagueDTO) int); ok {
		r0 = rf(userId, leagueInfo)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, databaseAccess.LeagueDTO) error); ok {
		r1 = rf(userId, leagueInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditRecurringAvailability provides a mock function with given fields: availability
func (_m *LeaguesDAO) EditRecurringAvailability(availability databaseAccess.SchedulingAvailabilityDTO) error {
	ret := _m.Called(availability)

	var r0 error
	if rf, ok := ret.Get(0).(func(databaseAccess.SchedulingAvailabilityDTO) error); ok {
		r0 = rf(availability)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetGameSummary provides a mock function with given fields: leagueId
func (_m *LeaguesDAO) GetGameSummary(leagueId int) ([]*databaseAccess.GameDTO, error) {
	ret := _m.Called(leagueId)

	var r0 []*databaseAccess.GameDTO
	if rf, ok := ret.Get(0).(func(int) []*databaseAccess.GameDTO); ok {
		r0 = rf(leagueId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*databaseAccess.GameDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(leagueId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLeagueInformation provides a mock function with given fields: leagueId
func (_m *LeaguesDAO) GetLeagueInformation(leagueId int) (*databaseAccess.LeagueDTO, error) {
	ret := _m.Called(leagueId)

	var r0 *databaseAccess.LeagueDTO
	if rf, ok := ret.Get(0).(func(int) *databaseAccess.LeagueDTO); ok {
		r0 = rf(leagueId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databaseAccess.LeagueDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(leagueId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLeaguePermissions provides a mock function with given fields: leagueId, userId
func (_m *LeaguesDAO) GetLeaguePermissions(leagueId int, userId int) (*databaseAccess.LeaguePermissionsDTO, error) {
	ret := _m.Called(leagueId, userId)

	var r0 *databaseAccess.LeaguePermissionsDTO
	if rf, ok := ret.Get(0).(func(int, int) *databaseAccess.LeaguePermissionsDTO); ok {
		r0 = rf(leagueId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databaseAccess.LeaguePermissionsDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(leagueId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMarkdownFile provides a mock function with given fields: leagueId
func (_m *LeaguesDAO) GetMarkdownFile(leagueId int) (string, error) {
	ret := _m.Called(leagueId)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(leagueId)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(leagueId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPublicLeagueList provides a mock function with given fields:
func (_m *LeaguesDAO) GetPublicLeagueList() ([]*databaseAccess.LeagueDTO, error) {
	ret := _m.Called()

	var r0 []*databaseAccess.LeagueDTO
	if rf, ok := ret.Get(0).(func() []*databaseAccess.LeagueDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*databaseAccess.LeagueDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSchedulingAvailabilities provides a mock function with given fields: leagueId
func (_m *LeaguesDAO) GetSchedulingAvailabilities(leagueId int) ([]*databaseAccess.SchedulingAvailabilityDTO, error) {
	ret := _m.Called(leagueId)

	var r0 []*databaseAccess.SchedulingAvailabilityDTO
	if rf, ok := ret.Get(0).(func(int) []*databaseAccess.SchedulingAvailabilityDTO); ok {
		r0 = rf(leagueId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*databaseAccess.SchedulingAvailabilityDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(leagueId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSchedulingAvailability provides a mock function with given fields: availabilityId
func (_m *LeaguesDAO) GetSchedulingAvailability(availabilityId int) (*databaseAccess.SchedulingAvailabilityDTO, error) {
	ret := _m.Called(availabilityId)

	var r0 *databaseAccess.SchedulingAvailabilityDTO
	if rf, ok := ret.Get(0).(func(int) *databaseAccess.SchedulingAvailabilityDTO); ok {
		r0 = rf(availabilityId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databaseAccess.SchedulingAvailabilityDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(availabilityId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamManagerInformation provides a mock function with given fields: leagueId
func (_m *LeaguesDAO) GetTeamManagerInformation(leagueId int) ([]*databaseAccess.TeamManagerDTO, error) {
	ret := _m.Called(leagueId)

	var r0 []*databaseAccess.TeamManagerDTO
	if rf, ok := ret.Get(0).(func(int) []*databaseAccess.TeamManagerDTO); ok {
		r0 = rf(leagueId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*databaseAccess.TeamManagerDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(leagueId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamSummary provides a mock function with given fields: leagueId
func (_m *LeaguesDAO) GetTeamSummary(leagueId int) ([]*databaseAccess.TeamDTO, error) {
	ret := _m.Called(leagueId)

	var r0 []*databaseAccess.TeamDTO
	if rf, ok := ret.Get(0).(func(int) []*databaseAccess.TeamDTO); ok {
		r0 = rf(leagueId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*databaseAccess.TeamDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(leagueId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsLeagueViewable provides a mock function with given fields: leagueId, userId
func (_m *LeaguesDAO) IsLeagueViewable(leagueId int, userId int) (bool, error) {
	ret := _m.Called(leagueId, userId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(leagueId, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(leagueId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsNameInUse provides a mock function with given fields: leagueId, name
func (_m *LeaguesDAO) IsNameInUse(leagueId int, name string) (bool, error) {
	ret := _m.Called(leagueId, name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, string) bool); ok {
		r0 = rf(leagueId, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(leagueId, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JoinLeague provides a mock function with given fields: leagueId, userId
func (_m *LeaguesDAO) JoinLeague(leagueId int, userId int) error {
	ret := _m.Called(leagueId, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(leagueId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveRecurringAvailabilities provides a mock function with given fields: availabilityId
func (_m *LeaguesDAO) RemoveRecurringAvailabilities(availabilityId int) error {
	ret := _m.Called(availabilityId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(availabilityId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetLeaguePermissions provides a mock function with given fields: leagueId, permissions
func (_m *LeaguesDAO) SetLeaguePermissions(leagueId int, permissions databaseAccess.UserPermissionsDTO) error {
	ret := _m.Called(leagueId, permissions)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, databaseAccess.UserPermissionsDTO) error); ok {
		r0 = rf(leagueId, permissions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMarkdownFile provides a mock function with given fields: leagueId, fileName
func (_m *LeaguesDAO) SetMarkdownFile(leagueId int, fileName string) error {
	ret := _m.Called(leagueId, fileName)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(leagueId, fileName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLeague provides a mock function with given fields: leagueInfo
func (_m *LeaguesDAO) UpdateLeague(leagueInfo databaseAccess.LeagueDTO) error {
	ret := _m.Called(leagueInfo)

	var r0 error
	if rf, ok := ret.Get(0).(func(databaseAccess.LeagueDTO) error); ok {
		r0 = rf(leagueInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
