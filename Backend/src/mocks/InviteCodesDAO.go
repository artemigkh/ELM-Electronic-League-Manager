// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import databaseAccess "Server/databaseAccess"
import mock "github.com/stretchr/testify/mock"

// InviteCodesDAO is an autogenerated mock type for the InviteCodesDAO type
type InviteCodesDAO struct {
	mock.Mock
}

// CreateTeamManagerInviteCode provides a mock function with given fields: leagueId, teamId, administrator, information, players, reportResults
func (_m *InviteCodesDAO) CreateTeamManagerInviteCode(leagueId int, teamId int, administrator bool, information bool, players bool, reportResults bool) (string, error) {
	ret := _m.Called(leagueId, teamId, administrator, information, players, reportResults)

	var r0 string
	if rf, ok := ret.Get(0).(func(int, int, bool, bool, bool, bool) string); ok {
		r0 = rf(leagueId, teamId, administrator, information, players, reportResults)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, bool, bool, bool, bool) error); ok {
		r1 = rf(leagueId, teamId, administrator, information, players, reportResults)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamManagerInviteCodeInformation provides a mock function with given fields: code
func (_m *InviteCodesDAO) GetTeamManagerInviteCodeInformation(code string) (*databaseAccess.TeamManagerInviteCode, error) {
	ret := _m.Called(code)

	var r0 *databaseAccess.TeamManagerInviteCode
	if rf, ok := ret.Get(0).(func(string) *databaseAccess.TeamManagerInviteCode); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databaseAccess.TeamManagerInviteCode)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsTeamManagerInviteCodeValid provides a mock function with given fields: code
func (_m *InviteCodesDAO) IsTeamManagerInviteCodeValid(code string) (bool, string, error) {
	ret := _m.Called(code)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(code)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(code)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UseTeamManagerInviteCode provides a mock function with given fields: userId, code
func (_m *InviteCodesDAO) UseTeamManagerInviteCode(userId int, code string) error {
	ret := _m.Called(userId, code)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(userId, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
