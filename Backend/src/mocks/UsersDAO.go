// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import databaseAccess "Server/databaseAccess"
import mock "github.com/stretchr/testify/mock"

// UsersDAO is an autogenerated mock type for the UsersDAO type
type UsersDAO struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: email, salt, hash
func (_m *UsersDAO) CreateUser(email string, salt string, hash string) error {
	ret := _m.Called(email, salt, hash)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(email, salt, hash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAuthenticationInformation provides a mock function with given fields: email
func (_m *UsersDAO) GetAuthenticationInformation(email string) (*databaseAccess.UserAuthenticationDTO, error) {
	ret := _m.Called(email)

	var r0 *databaseAccess.UserAuthenticationDTO
	if rf, ok := ret.Get(0).(func(string) *databaseAccess.UserAuthenticationDTO); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databaseAccess.UserAuthenticationDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPermissions provides a mock function with given fields: leagueId, userId
func (_m *UsersDAO) GetPermissions(leagueId int, userId int) (*databaseAccess.UserPermissionsDTO, error) {
	ret := _m.Called(leagueId, userId)

	var r0 *databaseAccess.UserPermissionsDTO
	if rf, ok := ret.Get(0).(func(int, int) *databaseAccess.UserPermissionsDTO); ok {
		r0 = rf(leagueId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databaseAccess.UserPermissionsDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(leagueId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserProfile provides a mock function with given fields: userId
func (_m *UsersDAO) GetUserProfile(userId int) (*databaseAccess.UserDTO, error) {
	ret := _m.Called(userId)

	var r0 *databaseAccess.UserDTO
	if rf, ok := ret.Get(0).(func(int) *databaseAccess.UserDTO); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databaseAccess.UserDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsEmailInUse provides a mock function with given fields: email
func (_m *UsersDAO) IsEmailInUse(email string) (bool, error) {
	ret := _m.Called(email)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
