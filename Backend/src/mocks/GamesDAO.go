// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import databaseAccess "Server/databaseAccess"
import mock "github.com/stretchr/testify/mock"

// GamesDAO is an autogenerated mock type for the GamesDAO type
type GamesDAO struct {
	mock.Mock
}

// AddExternalId provides a mock function with given fields: gameId, externalId
func (_m *GamesDAO) AddExternalId(gameId int, externalId string) error {
	ret := _m.Called(gameId, externalId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(gameId, externalId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateGame provides a mock function with given fields: gameInformation
func (_m *GamesDAO) CreateGame(gameInformation databaseAccess.GameDTO) (int, error) {
	ret := _m.Called(gameInformation)

	var r0 int
	if rf, ok := ret.Get(0).(func(databaseAccess.GameDTO) int); ok {
		r0 = rf(gameInformation)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(databaseAccess.GameDTO) error); ok {
		r1 = rf(gameInformation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGame provides a mock function with given fields: gameId
func (_m *GamesDAO) DeleteGame(gameId int) error {
	ret := _m.Called(gameId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(gameId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DoesExistConflict provides a mock function with given fields: team1Id, team2Id, gameTime
func (_m *GamesDAO) DoesExistConflict(team1Id int, team2Id int, gameTime int) (bool, error) {
	ret := _m.Called(team1Id, team2Id, gameTime)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int, int) bool); ok {
		r0 = rf(team1Id, team2Id, gameTime)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(team1Id, team2Id, gameTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGameInformation provides a mock function with given fields: gameId
func (_m *GamesDAO) GetGameInformation(gameId int) (*databaseAccess.GameDTO, error) {
	ret := _m.Called(gameId)

	var r0 *databaseAccess.GameDTO
	if rf, ok := ret.Get(0).(func(int) *databaseAccess.GameDTO); ok {
		r0 = rf(gameId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databaseAccess.GameDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(gameId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGameInformationFromExternalId provides a mock function with given fields: externalId
func (_m *GamesDAO) GetGameInformationFromExternalId(externalId string) (*databaseAccess.GameDTO, error) {
	ret := _m.Called(externalId)

	var r0 *databaseAccess.GameDTO
	if rf, ok := ret.Get(0).(func(string) *databaseAccess.GameDTO); ok {
		r0 = rf(externalId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databaseAccess.GameDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(externalId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasReportResultPermissions provides a mock function with given fields: leagueId, gameId, userId
func (_m *GamesDAO) HasReportResultPermissions(leagueId int, gameId int, userId int) (bool, error) {
	ret := _m.Called(leagueId, gameId, userId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int, int) bool); ok {
		r0 = rf(leagueId, gameId, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(leagueId, gameId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReportGame provides a mock function with given fields: gameInfo
func (_m *GamesDAO) ReportGame(gameInfo databaseAccess.GameDTO) error {
	ret := _m.Called(gameInfo)

	var r0 error
	if rf, ok := ret.Get(0).(func(databaseAccess.GameDTO) error); ok {
		r0 = rf(gameInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RescheduleGame provides a mock function with given fields: gameId, gameTime
func (_m *GamesDAO) RescheduleGame(gameId int, gameTime int) error {
	ret := _m.Called(gameId, gameTime)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(gameId, gameTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
