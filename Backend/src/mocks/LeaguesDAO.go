// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import databaseAccess "Server/databaseAccess"
import mock "github.com/stretchr/testify/mock"

// LeaguesDAO is an autogenerated mock type for the LeaguesDAO type
type LeaguesDAO struct {
	mock.Mock
}

// AddAvailability provides a mock function with given fields: leagueId, availability
func (_m *LeaguesDAO) AddAvailability(leagueId int, availability databaseAccess.AvailabilityCore) (int, error) {
	ret := _m.Called(leagueId, availability)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, databaseAccess.AvailabilityCore) int); ok {
		r0 = rf(leagueId, availability)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, databaseAccess.AvailabilityCore) error); ok {
		r1 = rf(leagueId, availability)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddWeeklyAvailability provides a mock function with given fields: leagueId, availability
func (_m *LeaguesDAO) AddWeeklyAvailability(leagueId int, availability databaseAccess.WeeklyAvailabilityCore) (int, error) {
	ret := _m.Called(leagueId, availability)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, databaseAccess.WeeklyAvailabilityCore) int); ok {
		r0 = rf(leagueId, availability)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, databaseAccess.WeeklyAvailabilityCore) error); ok {
		r1 = rf(leagueId, availability)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CanJoinLeague provides a mock function with given fields: leagueId, userId
func (_m *LeaguesDAO) CanJoinLeague(leagueId int, userId int) (bool, error) {
	ret := _m.Called(leagueId, userId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(leagueId, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(leagueId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLeague provides a mock function with given fields: userId, leagueInfo
func (_m *LeaguesDAO) CreateLeague(userId int, leagueInfo databaseAccess.LeagueCore) (int, error) {
	ret := _m.Called(userId, leagueInfo)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, databaseAccess.LeagueCore) int); ok {
		r0 = rf(userId, leagueInfo)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, databaseAccess.LeagueCore) error); ok {
		r1 = rf(userId, leagueInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAvailability provides a mock function with given fields: leagueId, availabilityId
func (_m *LeaguesDAO) DeleteAvailability(leagueId int, availabilityId int) error {
	ret := _m.Called(leagueId, availabilityId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(leagueId, availabilityId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteWeeklyAvailability provides a mock function with given fields: leagueId, availabilityId
func (_m *LeaguesDAO) DeleteWeeklyAvailability(leagueId int, availabilityId int) error {
	ret := _m.Called(leagueId, availabilityId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(leagueId, availabilityId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditWeeklyAvailability provides a mock function with given fields: leagueId, availabilityId, availability
func (_m *LeaguesDAO) EditWeeklyAvailability(leagueId int, availabilityId int, availability databaseAccess.WeeklyAvailabilityCore) (int, error) {
	ret := _m.Called(leagueId, availabilityId, availability)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int, databaseAccess.WeeklyAvailabilityCore) int); ok {
		r0 = rf(leagueId, availabilityId, availability)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, databaseAccess.WeeklyAvailabilityCore) error); ok {
		r1 = rf(leagueId, availabilityId, availability)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAvailabilities provides a mock function with given fields: leagueId
func (_m *LeaguesDAO) GetAvailabilities(leagueId int) ([]*databaseAccess.Availability, error) {
	ret := _m.Called(leagueId)

	var r0 []*databaseAccess.Availability
	if rf, ok := ret.Get(0).(func(int) []*databaseAccess.Availability); ok {
		r0 = rf(leagueId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*databaseAccess.Availability)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(leagueId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLeagueInformation provides a mock function with given fields: leagueId
func (_m *LeaguesDAO) GetLeagueInformation(leagueId int) (*databaseAccess.League, error) {
	ret := _m.Called(leagueId)

	var r0 *databaseAccess.League
	if rf, ok := ret.Get(0).(func(int) *databaseAccess.League); ok {
		r0 = rf(leagueId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databaseAccess.League)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(leagueId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMarkdownFile provides a mock function with given fields: leagueId
func (_m *LeaguesDAO) GetMarkdownFile(leagueId int) (string, error) {
	ret := _m.Called(leagueId)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(leagueId)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(leagueId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPublicLeagueList provides a mock function with given fields:
func (_m *LeaguesDAO) GetPublicLeagueList() ([]*databaseAccess.League, error) {
	ret := _m.Called()

	var r0 []*databaseAccess.League
	if rf, ok := ret.Get(0).(func() []*databaseAccess.League); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*databaseAccess.League)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamManagerInformation provides a mock function with given fields: leagueId
func (_m *LeaguesDAO) GetTeamManagerInformation(leagueId int) ([]*databaseAccess.TeamWithManagers, error) {
	ret := _m.Called(leagueId)

	var r0 []*databaseAccess.TeamWithManagers
	if rf, ok := ret.Get(0).(func(int) []*databaseAccess.TeamWithManagers); ok {
		r0 = rf(leagueId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*databaseAccess.TeamWithManagers)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(leagueId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWeeklyAvailabilities provides a mock function with given fields: leagueId
func (_m *LeaguesDAO) GetWeeklyAvailabilities(leagueId int) ([]*databaseAccess.WeeklyAvailability, error) {
	ret := _m.Called(leagueId)

	var r0 []*databaseAccess.WeeklyAvailability
	if rf, ok := ret.Get(0).(func(int) []*databaseAccess.WeeklyAvailability); ok {
		r0 = rf(leagueId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*databaseAccess.WeeklyAvailability)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(leagueId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsLeagueViewable provides a mock function with given fields: leagueId, userId
func (_m *LeaguesDAO) IsLeagueViewable(leagueId int, userId int) (bool, error) {
	ret := _m.Called(leagueId, userId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(leagueId, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(leagueId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsNameInUse provides a mock function with given fields: leagueId, name
func (_m *LeaguesDAO) IsNameInUse(leagueId int, name string) (bool, error) {
	ret := _m.Called(leagueId, name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, string) bool); ok {
		r0 = rf(leagueId, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(leagueId, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JoinLeague provides a mock function with given fields: leagueId, userId
func (_m *LeaguesDAO) JoinLeague(leagueId int, userId int) error {
	ret := _m.Called(leagueId, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(leagueId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetLeaguePermissions provides a mock function with given fields: leagueId, userId, permissions
func (_m *LeaguesDAO) SetLeaguePermissions(leagueId int, userId int, permissions databaseAccess.LeaguePermissionsCore) error {
	ret := _m.Called(leagueId, userId, permissions)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, databaseAccess.LeaguePermissionsCore) error); ok {
		r0 = rf(leagueId, userId, permissions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMarkdownFile provides a mock function with given fields: leagueId, fileName
func (_m *LeaguesDAO) SetMarkdownFile(leagueId int, fileName string) error {
	ret := _m.Called(leagueId, fileName)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(leagueId, fileName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLeague provides a mock function with given fields: leagueId, leagueInfo
func (_m *LeaguesDAO) UpdateLeague(leagueId int, leagueInfo databaseAccess.LeagueCore) error {
	ret := _m.Called(leagueId, leagueInfo)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, databaseAccess.LeagueCore) error); ok {
		r0 = rf(leagueId, leagueInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
