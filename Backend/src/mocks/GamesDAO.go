// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import databaseAccess "Server/databaseAccess"
import mock "github.com/stretchr/testify/mock"

// GamesDAO is an autogenerated mock type for the GamesDAO type
type GamesDAO struct {
	mock.Mock
}

// AddExternalId provides a mock function with given fields: gameId, externalId
func (_m *GamesDAO) AddExternalId(gameId int, externalId string) error {
	ret := _m.Called(gameId, externalId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(gameId, externalId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateGame provides a mock function with given fields: leagueId, gameInformation
func (_m *GamesDAO) CreateGame(leagueId int, gameInformation databaseAccess.GameCreationInformation) (int, error) {
	ret := _m.Called(leagueId, gameInformation)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, databaseAccess.GameCreationInformation) int); ok {
		r0 = rf(leagueId, gameInformation)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, databaseAccess.GameCreationInformation) error); ok {
		r1 = rf(leagueId, gameInformation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGame provides a mock function with given fields: gameId
func (_m *GamesDAO) DeleteGame(gameId int) error {
	ret := _m.Called(gameId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(gameId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DoesExistConflict provides a mock function with given fields: team1Id, team2Id, gameTime
func (_m *GamesDAO) DoesExistConflict(team1Id int, team2Id int, gameTime int) (bool, error) {
	ret := _m.Called(team1Id, team2Id, gameTime)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int, int) bool); ok {
		r0 = rf(team1Id, team2Id, gameTime)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(team1Id, team2Id, gameTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllGamesInLeague provides a mock function with given fields: leagueId
func (_m *GamesDAO) GetAllGamesInLeague(leagueId int) ([]*databaseAccess.Game, error) {
	ret := _m.Called(leagueId)

	var r0 []*databaseAccess.Game
	if rf, ok := ret.Get(0).(func(int) []*databaseAccess.Game); ok {
		r0 = rf(leagueId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*databaseAccess.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(leagueId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGameInformation provides a mock function with given fields: gameId
func (_m *GamesDAO) GetGameInformation(gameId int) (*databaseAccess.Game, error) {
	ret := _m.Called(gameId)

	var r0 *databaseAccess.Game
	if rf, ok := ret.Get(0).(func(int) *databaseAccess.Game); ok {
		r0 = rf(gameId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databaseAccess.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(gameId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGameInformationFromExternalId provides a mock function with given fields: externalId
func (_m *GamesDAO) GetGameInformationFromExternalId(externalId string) (*databaseAccess.Game, error) {
	ret := _m.Called(externalId)

	var r0 *databaseAccess.Game
	if rf, ok := ret.Get(0).(func(string) *databaseAccess.Game); ok {
		r0 = rf(externalId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databaseAccess.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(externalId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasReportResultPermissions provides a mock function with given fields: leagueId, gameId, userId
func (_m *GamesDAO) HasReportResultPermissions(leagueId int, gameId int, userId int) (bool, error) {
	ret := _m.Called(leagueId, gameId, userId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int, int) bool); ok {
		r0 = rf(leagueId, gameId, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(leagueId, gameId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReportGame provides a mock function with given fields: gameId, gameResult
func (_m *GamesDAO) ReportGame(gameId int, gameResult databaseAccess.GameResult) error {
	ret := _m.Called(gameId, gameResult)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, databaseAccess.GameResult) error); ok {
		r0 = rf(gameId, gameResult)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RescheduleGame provides a mock function with given fields: gameId, gameTime
func (_m *GamesDAO) RescheduleGame(gameId int, gameTime int) error {
	ret := _m.Called(gameId, gameTime)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(gameId, gameTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
