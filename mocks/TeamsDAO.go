// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import databaseAccess "esports-league-manager/Backend/Server/databaseAccess"
import mock "github.com/stretchr/testify/mock"

// TeamsDAO is an autogenerated mock type for the TeamsDAO type
type TeamsDAO struct {
	mock.Mock
}

// CreateTeam provides a mock function with given fields: leagueID, userID, name, tag
func (_m *TeamsDAO) CreateTeam(leagueID int, userID int, name string, tag string) (int, error) {
	ret := _m.Called(leagueID, userID, name, tag)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int, string, string) int); ok {
		r0 = rf(leagueID, userID, name, tag)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, string, string) error); ok {
		r1 = rf(leagueID, userID, name, tag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DoesTeamExist provides a mock function with given fields: teamID, leagueID
func (_m *TeamsDAO) DoesTeamExist(teamID int, leagueID int) (bool, error) {
	ret := _m.Called(teamID, leagueID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(teamID, leagueID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(teamID, leagueID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamInformation provides a mock function with given fields: teamID, leagueID
func (_m *TeamsDAO) GetTeamInformation(teamID int, leagueID int) (*databaseAccess.TeamInformation, error) {
	ret := _m.Called(teamID, leagueID)

	var r0 *databaseAccess.TeamInformation
	if rf, ok := ret.Get(0).(func(int, int) *databaseAccess.TeamInformation); ok {
		r0 = rf(teamID, leagueID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databaseAccess.TeamInformation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(teamID, leagueID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsInfoInUse provides a mock function with given fields: name, tag, leagueID
func (_m *TeamsDAO) IsInfoInUse(name string, tag string, leagueID int) (bool, string, error) {
	ret := _m.Called(name, tag, leagueID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, int) bool); ok {
		r0 = rf(name, tag, leagueID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, string, int) string); ok {
		r1 = rf(name, tag, leagueID)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, int) error); ok {
		r2 = rf(name, tag, leagueID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
