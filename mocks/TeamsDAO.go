// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import databaseAccess "esports-league-manager/Backend/Server/databaseAccess"
import mock "github.com/stretchr/testify/mock"

// TeamsDAO is an autogenerated mock type for the TeamsDAO type
type TeamsDAO struct {
	mock.Mock
}

// AddNewPlayer provides a mock function with given fields: teamId, gameIdentifier, name, mainRoster
func (_m *TeamsDAO) AddNewPlayer(teamId int, gameIdentifier string, name string, mainRoster bool) (int, error) {
	ret := _m.Called(teamId, gameIdentifier, name, mainRoster)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, string, string, bool) int); ok {
		r0 = rf(teamId, gameIdentifier, name, mainRoster)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string, string, bool) error); ok {
		r1 = rf(teamId, gameIdentifier, name, mainRoster)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTeam provides a mock function with given fields: leagueId, userId, name, tag
func (_m *TeamsDAO) CreateTeam(leagueId int, userId int, name string, tag string) (int, error) {
	ret := _m.Called(leagueId, userId, name, tag)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int, string, string) int); ok {
		r0 = rf(leagueId, userId, name, tag)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, string, string) error); ok {
		r1 = rf(leagueId, userId, name, tag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTeam provides a mock function with given fields: leagueId, teamId
func (_m *TeamsDAO) DeleteTeam(leagueId int, teamId int) error {
	ret := _m.Called(leagueId, teamId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(leagueId, teamId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DoesPlayerExist provides a mock function with given fields: teamId, playerId
func (_m *TeamsDAO) DoesPlayerExist(teamId int, playerId int) (bool, error) {
	ret := _m.Called(teamId, playerId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(teamId, playerId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(teamId, playerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DoesTeamExist provides a mock function with given fields: leagueId, teamId
func (_m *TeamsDAO) DoesTeamExist(leagueId int, teamId int) (bool, error) {
	ret := _m.Called(leagueId, teamId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(leagueId, teamId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(leagueId, teamId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamInformation provides a mock function with given fields: leagueId, teamId
func (_m *TeamsDAO) GetTeamInformation(leagueId int, teamId int) (*databaseAccess.TeamInformation, error) {
	ret := _m.Called(leagueId, teamId)

	var r0 *databaseAccess.TeamInformation
	if rf, ok := ret.Get(0).(func(int, int) *databaseAccess.TeamInformation); ok {
		r0 = rf(leagueId, teamId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databaseAccess.TeamInformation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(leagueId, teamId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamPermissions provides a mock function with given fields: teamId, userId
func (_m *TeamsDAO) GetTeamPermissions(teamId int, userId int) (*databaseAccess.TeamPermissions, error) {
	ret := _m.Called(teamId, userId)

	var r0 *databaseAccess.TeamPermissions
	if rf, ok := ret.Get(0).(func(int, int) *databaseAccess.TeamPermissions); ok {
		r0 = rf(teamId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databaseAccess.TeamPermissions)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(teamId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasPlayerEditPermissions provides a mock function with given fields: leagueId, teamId, userId
func (_m *TeamsDAO) HasPlayerEditPermissions(leagueId int, teamId int, userId int) (bool, error) {
	ret := _m.Called(leagueId, teamId, userId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int, int) bool); ok {
		r0 = rf(leagueId, teamId, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(leagueId, teamId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsInfoInUse provides a mock function with given fields: leagueId, teamId, name, tag
func (_m *TeamsDAO) IsInfoInUse(leagueId int, teamId int, name string, tag string) (bool, string, error) {
	ret := _m.Called(leagueId, teamId, name, tag)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int, string, string) bool); ok {
		r0 = rf(leagueId, teamId, name, tag)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(int, int, string, string) string); ok {
		r1 = rf(leagueId, teamId, name, tag)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int, string, string) error); ok {
		r2 = rf(leagueId, teamId, name, tag)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IsTeamActive provides a mock function with given fields: leagueId, teamId
func (_m *TeamsDAO) IsTeamActive(leagueId int, teamId int) (bool, error) {
	ret := _m.Called(leagueId, teamId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(leagueId, teamId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(leagueId, teamId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePlayer provides a mock function with given fields: teamId, playerId
func (_m *TeamsDAO) RemovePlayer(teamId int, playerId int) error {
	ret := _m.Called(teamId, playerId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(teamId, playerId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePlayer provides a mock function with given fields: teamId, playerId, gameIdentifier, name, mainRoster
func (_m *TeamsDAO) UpdatePlayer(teamId int, playerId int, gameIdentifier string, name string, mainRoster bool) error {
	ret := _m.Called(teamId, playerId, gameIdentifier, name, mainRoster)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, string, string, bool) error); ok {
		r0 = rf(teamId, playerId, gameIdentifier, name, mainRoster)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTeam provides a mock function with given fields: leagueId, teamId, name, tag
func (_m *TeamsDAO) UpdateTeam(leagueId int, teamId int, name string, tag string) error {
	ret := _m.Called(leagueId, teamId, name, tag)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, string, string) error); ok {
		r0 = rf(leagueId, teamId, name, tag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
