// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import mock "github.com/stretchr/testify/mock"

// UsersDAO is an autogenerated mock type for the UsersDAO type
type UsersDAO struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: email, salt, hash
func (_m *UsersDAO) CreateUser(email string, salt string, hash string) error {
	ret := _m.Called(email, salt, hash)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(email, salt, hash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAuthenticationInformation provides a mock function with given fields: email
func (_m *UsersDAO) GetAuthenticationInformation(email string) (int, string, string, error) {
	ret := _m.Called(email)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(string) string); ok {
		r2 = rf(email)
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(string) error); ok {
		r3 = rf(email)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// IsEmailInUse provides a mock function with given fields: email
func (_m *UsersDAO) IsEmailInUse(email string) (bool, error) {
	ret := _m.Called(email)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
