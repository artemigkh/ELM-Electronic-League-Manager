// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import databaseAccess "esports-league-manager/Backend/Server/databaseAccess"
import mock "github.com/stretchr/testify/mock"

// LeaguesDAO is an autogenerated mock type for the LeaguesDAO type
type LeaguesDAO struct {
	mock.Mock
}

// CreateLeague provides a mock function with given fields: userID, name, publicView, publicJoin
func (_m *LeaguesDAO) CreateLeague(userID int, name string, publicView bool, publicJoin bool) (int, error) {
	ret := _m.Called(userID, name, publicView, publicJoin)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, string, bool, bool) int); ok {
		r0 = rf(userID, name, publicView, publicJoin)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string, bool, bool) error); ok {
		r1 = rf(userID, name, publicView, publicJoin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLeagueInformation provides a mock function with given fields: leagueID
func (_m *LeaguesDAO) GetLeagueInformation(leagueID int) (*databaseAccess.LeagueInformation, error) {
	ret := _m.Called(leagueID)

	var r0 *databaseAccess.LeagueInformation
	if rf, ok := ret.Get(0).(func(int) *databaseAccess.LeagueInformation); ok {
		r0 = rf(leagueID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databaseAccess.LeagueInformation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(leagueID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamSummary provides a mock function with given fields: leagueID
func (_m *LeaguesDAO) GetTeamSummary(leagueID int) ([]databaseAccess.TeamSummaryInformation, error) {
	ret := _m.Called(leagueID)

	var r0 []databaseAccess.TeamSummaryInformation
	if rf, ok := ret.Get(0).(func(int) []databaseAccess.TeamSummaryInformation); ok {
		r0 = rf(leagueID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]databaseAccess.TeamSummaryInformation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(leagueID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasEditTeamsPermission provides a mock function with given fields: leagueID, userID
func (_m *LeaguesDAO) HasEditTeamsPermission(leagueID int, userID int) (bool, error) {
	ret := _m.Called(leagueID, userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(leagueID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(leagueID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsLeagueViewable provides a mock function with given fields: leagueID, userID
func (_m *LeaguesDAO) IsLeagueViewable(leagueID int, userID int) (bool, error) {
	ret := _m.Called(leagueID, userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(leagueID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(leagueID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsNameInUse provides a mock function with given fields: name
func (_m *LeaguesDAO) IsNameInUse(name string) (bool, error) {
	ret := _m.Called(name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
